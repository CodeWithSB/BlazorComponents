@page "/"
@using System;
@using Components.ModalDialog;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@inject IWebAssemblyHostEnvironment environment;

<div class="demo">
    <h2 class="heading">Modal Dialog Buttons</h2>
    <div class="button-containers">
        <button class="componentModal" @onclick="OpenComponentModal">Open Component Modal</button>
        <button class="alertModal" @onclick="OpenAlertModal">Open Alert Modal</button>
        <button class="confirmationModal" @onclick="OpenConfirmationModal">Open Confirmation Modal</button>
    </div>
    <p style="color:red; margin-left:10px"><strong>Note:</strong> Below options aren't gonna affect the Alert and
        Confirmation Modal.</p>

    @if (dialogOptions != null)
    {
        <div class="options-demo">
            <EditForm Model="dialogOptions" class="options-form">
                <div class="modal-options">
                    <h3><u>Options</u></h3>
                    <div class="option-wrapper">
                        <p> Close modal on backdrop click?</p>
                        <InputRadioGroup @bind-Value="dialogOptions.IsBackDropClickCloseAllowed">
                            <InputRadio id="backdrop-true" Value="@true" /> <label for="backdrop-true"
                            style="margin:0px 20px 0px 0px">true</label>
                            <InputRadio id="backdrop-false" Value="@false" /> <label for="backdrop-false"
                            style="margin:0px 20px 0px 0px">false</label>
                        </InputRadioGroup>
                    </div>

                    <div class="option-wrapper">
                        <p> Show Header?</p>
                        <InputRadioGroup @bind-Value="dialogOptions.ShowHeader">
                            <InputRadio id="showHeader-true" Value="@true" /> <label for="showHeader-true"
                            style="margin:0px 20px 0px 3px">true</label>
                            <InputRadio id="showHeader-false" Value="@false" /> <label for="showHeader-false"
                            style="margin:0px 20px 0px 3px">false</label>
                        </InputRadioGroup>
                    </div>

                    <div class="option-wrapper">
                        <p> Custom Header: </p>
                        <InputText class="option-text" @bind-Value="dialogOptions.HeaderText" />
                    </div>

                    <div class="option-wrapper">
                        <p> Show Corner Close?</p>
                        <InputRadioGroup @bind-Value="dialogOptions.ShowCornerClose">
                            <InputRadio id="showCornerClose-true" Value="@true" /> <label for="showCornerClose-true"
                            style="margin:0px 20px 0px 3px">true</label>
                            <InputRadio id="showCornerClose-false" Value="@false" /> <label for="showCornerClose-false"
                            style="margin:0px 20px 0px 3px">false</label>
                        </InputRadioGroup>
                    </div>

                    <div class="option-wrapper">
                        <p> Show Footer?</p>
                        <InputRadioGroup @bind-Value="dialogOptions.ShowFooter">
                            <InputRadio id="showFooter-true" Value="@true" /> <label for="showFooter-true"
                            style="margin:0px 20px 0px 3px">true</label>
                            <InputRadio id="showFooter-false" Value="@false" /> <label for="showFooter-false"
                            style="margin:0px 20px 0px 3px">false</label>
                        </InputRadioGroup>
                    </div>

                    <div class="option-wrapper">
                        <p> Show Footer Close?</p>
                        <InputRadioGroup @bind-Value="dialogOptions.ShowFooterClose">
                            <InputRadio id="showFooterClose-true" Value="@true" /> <label for="showFooterClose-true"
                            style="margin:0px 20px 0px 3px">true</label>
                            <InputRadio id="showFooterClose-false" Value="@false" /> <label for="showFooterClose-false"
                            style="margin:0px 20px 0px 3px">false</label>
                        </InputRadioGroup>
                    </div>

                    <div class="option-wrapper">
                        <p> Custom Close Button Text: </p>
                        <InputText class="option-text" @bind-Value="dialogOptions.CloseButtonText" />
                    </div>

                    <div class="option-wrapper">
                        <p> Show Footer Submit?</p>
                        <InputRadioGroup @bind-Value="dialogOptions.ShowFooterSubmit">
                            <InputRadio id="showFooterSubmit-true" Value="@true" /> <label for="showFooterSubmit-true"
                            style="margin:0px 20px 0px 3px">true</label>
                            <InputRadio id="showFooterSubmit-false" Value="@false" /> <label for="showFooterSubmit-false"
                            style="margin:0px 20px 0px 3px">false</label>
                        </InputRadioGroup>
                    </div>

                    <div class="option-wrapper">
                        <p> Custom Submit Button Text: </p>
                        <InputText class="option-text" @bind-Value="dialogOptions.SubmitButtonText" />
                    </div>
                </div>
            </EditForm>
            <div class="console-result">
                <h3><u>Code:</u></h3>
                <div class="option-wrapper">
                    <pre>
    <code>
    DialogOptions dialogOptions = new DialogOptions(){
        IsBackDropClickCloseAllowed = @dialogOptions.IsBackDropClickCloseAllowed.ToString().ToLowerInvariant(),
        ShowHeader = @dialogOptions.ShowHeader.ToString().ToLowerInvariant(),
        HeaderText = "@dialogOptions.HeaderText",
        ShowCornerClose = @dialogOptions.ShowCornerClose.ToString().ToLowerInvariant(),
        ShowFooter = @dialogOptions.ShowFooter.ToString().ToLowerInvariant(),
        ShowFooterClose = @dialogOptions.ShowFooterClose.ToString().ToLowerInvariant(),
        ShowFooterSubmit = @dialogOptions.ShowFooterSubmit.ToString().ToLowerInvariant(),
        CloseButtonText = "@dialogOptions.CloseButtonText",
        SubmitButtonText = "@dialogOptions.SubmitButtonText"
    };
    </code>
                        </pre>
                </div>

                <br>
                
                <h3><u>Console Logs:</u></h3>
                @if(ConsoleResults.Count()>0){
                    <div class="option-wrapper">
                        @foreach (string item in ConsoleResults)
                        {
                            <p> @((MarkupString)item) </p>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>


@code {

    [CascadingParameter]
    public Modal ModalDialog { get; set; }

    private DialogOptions dialogOptions = new DialogOptions();

    List<string> ConsoleResults = new List<string>();

    private async Task OpenComponentModal()
    {
        DialogResult dr = await ModalDialog.OpenComponentModal(typeof(TestComponent), null, dialogOptions);
        if (dr == DialogResult.OK)
        {
            ConsoleResults.Add("Component Modal Response: <code>DialogResult.OK</code>");
            Console.WriteLine("Component Modal Response: DialogResult.OK");
        }
        if (dr == DialogResult.CANCEL)
        {
            ConsoleResults.Add("Component Modal Response: <code>DialogResult.CANCEL</code>");
            Console.WriteLine("Component Modal Response: DialogResult.CANCEL");
        }
    }

    private async Task OpenAlertModal()
    {
        DialogResult dr = await ModalDialog.OpenAlertModal(((MarkupString)"<p> Hello World! </p>"));
        dialogOptions = ModalDialog.Options;
        if (dr == DialogResult.OK)
        {
            ConsoleResults.Add("Alert Modal Response: <code>DialogResult.OK</code>");
            Console.WriteLine("Alert Modal Response: DialogResult.OK");
        }
    }

    private async Task OpenConfirmationModal()
    {
        DialogResult dr = await ModalDialog.OpenConfirmationModal(((MarkupString)"<p> Are you sure? </p>"));
        dialogOptions = ModalDialog.Options;
        if (dr == DialogResult.OK)
        {
            ConsoleResults.Add("Confirmation Modal Response: <code>DialogResult.OK</code>");
            Console.WriteLine("Confirmation Modal Response: DialogResult.OK");
        }
        if (dr == DialogResult.CANCEL)
        {
            ConsoleResults.Add("Confirmation Modal Response: <code>DialogResult.CANCEL</code>");
            Console.WriteLine("Confirmation Modal Response: DialogResult.CANCEL");
        }
    }
}